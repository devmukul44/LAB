-------dda-------------
#include<iostream>
#include<graphics.h>
using  namespace std;
int main()
{
float  xa,xb,ya,yb,dx,dy,len;
float  xinc,yinc;
cout<<" \nenter the value of x1  : ";
cin>>xa;
cout<<" \nenter the value of y1  : ";
cin>>ya;
cout<<" \nenter the value of x2  : ";
cin>>xb;
cout<<" \nenter the value of y2  : ";
cin>>yb;

dx=xb-xa;
dy=yb-ya;
if(dx>dy)
{
len =dx;
}
else
{
len= dy;
}
xinc=dx/len;
yinc=dy/len;
int x,y;
x=xa;
y=ya;
float a,b;
initwindow(400,400);
putpixel(xa,ya,10);
for(int i=0;i<len;i++)
{
a=x+xinc;
b=y+yinc;
x=(int)a;
y=(int)b;
putpixel(x,y,10);
}
while(!kbhit())
{
delay(200);
}
getch();
return 0;
}
----------------------------------

------bresnam's-------------
#include<stdio.h>
#include<conio.h>
#include<graphics.h>
int main()
{
     int dx,dy,x,y,p,x1,y1,x2,y2;
     int gd,gm;
     
     printf("\n\n\tEnter the coordinates of first point:");
     scanf("%d %d",&x1,&y1);
     printf("\n\n\tEnter the coordinates of second point:");
     scanf("%d %d",&x2,&y2);
     dx=(x2-x1);
     dy=(y2-y1);
     p=2*dy-dx;
     x=x1;
     y=y1;
     initwindow(400, 300, "First Sample");
     putpixel(x,y,07);
     while(x<=x2)
     {
                 if(p<0)
                 {
                        x=x+1;
                        y=y;
                        p=p+2*(dy);
                  }
                    else
                        {
                            x=x+1;
                            y=y+1;
                            p=p+2*(dy-dx);
                        }
                            putpixel(x,y,07);
                            }
                            getch();
                            return 0;}                       

---------------------------------------

-------------circle drawing------------
# include <iostream>
# include <conio.h>
# include <graphics.h>
# include <math.h>
using namespace std;

void Circle(int Radius,int xC,int yC);
int main()
{
	
	initwindow(400,400);
    int Radius, xC, yC;
    cout<< endl << "Enter Center point coordinates...";
    cout<<endl<<"  Xc    : ";
    cin>>xC;
    cout<<endl<<"  Yc    : ";
    cin>>yC;
    cout<<endl<<"Radius  : ";
    cin>>Radius;
    cleardevice();
    Circle(Radius,xC,yC);
    getch();
    return 0;
}
void Circle(int Radius,int xC,int yC)
{
    int P;
    int x,y;
    void Draw(int x,int y,int xC,int yC);
    P = 1 - Radius;
    x = 0;
    y = Radius;
    Draw(x,y,xC,yC);
    while (x<=y)
    {
        if (P<0)
        {
            P = P +(2 * x + 1);
            x = x+1;
        }
        else
        {
            P = P+(2 * (x - y) + 1);
            x = x+1;
            y = y-1;
        }
        Draw(x,y,xC,yC);
    }

}
void Draw(int x,int y,int xC,int yC)
{
    putpixel(xC + x,yC + y,10);
    putpixel(xC + x,yC - y,10);
    putpixel(xC - x,yC + y,10);
    putpixel(xC - x,yC - y,10);
    putpixel(xC + y,yC + x,10);
    putpixel(xC - y,yC + x,10);
    putpixel(xC + y,yC - x,10);
    putpixel(xC - y,yC - x,10);
}
--------------------------------------

---------boundary fill------------
#include<iostream>
#include<graphics.h>
#include<conio.h>
using  namespace std;


int main()
{
int xc,yc,r;
initwindow(400,400);
cout<<"Enter co-ordinates of the centre:";
cin>>xc>>yc;
cout<<"Enter radius of circle:";
cin>>r;
circle(xc,yc,r);
//cout<<"Enter eny key for boundary fill operation";
//getch();
void bfill(int,int,int,int);
bfill(xc,yc,RED,WHITE);
getch();
return 0;
}

void bfill(int x,int y,int f_col,int b_col){
int current = getpixel(x,y);

if(current!=f_col && current!=b_col)
{
delay(1);
putpixel(x,y,f_col);
bfill(x+1,y,f_col,b_col);
bfill(x-1,y,f_col,b_col);
bfill(x,y+1,f_col,b_col);
bfill(x,y-1,f_col,b_col);
}
}
---------------------------------

-------------flood fill---------
#include <iostream>
#include <conio.h>
#include <graphics.h>
using namespace std;

int main()
{
int xc,yc,r;
initwindow(400,400);

cout<<"Enter co-ordinates of the centre:";
cin>>xc>>yc;
cout<<"Enter radius of circle:";
cin>>r;
circle(xc,yc,r);

//cout<<"Press any key to fill circleâ€¦";
//getch();
void ffill(int,int,int,int);
ffill(xc,yc,BLACK,RED);
getch();
return 0;
}

void ffill(int x,int y,int o_col,int n_col)
{
int current = getpixel(x,y);

if(current == o_col && current != n_col)
{
delay(1);
putpixel(x,y,n_col);
ffill(x+1,y,o_col,n_col);
ffill(x-1,y,o_col,n_col);
ffill(x,y+1,o_col,n_col);
ffill(x,y-1,o_col,n_col);
}
}
---------------------------------------

---------matrix multiplication-------
#include<iostream>
#include<conio.h>
using namespace std;

int main()
{
    int a[10][10], b[10][10],c[10][10];
    int x,y,i,j,m,n;
 
 
    cout<<"\nEnter the number of rows and columns for Matrix A:::\n\n";
    cin>>x>>y;
 
    // x denotes number rows in matrix A
    // y denotes number columns in matrix A
 
    cout<<"\n\nEnter elements for Matrix A :::\n\n";
 
    for(i=0;i<x;i++)
    {
        for(j=0;j<y;j++)
        {
            cin>>a[i][j];
        }
        cout<<"\n";
    }
 
 
 
    cout<<"\n\nMatrix A :\n\n";
 
    for(i=0;i<x;i++)
    {
        for(j=0;j<y;j++)
        {
            cout<<"\t"<<a[i][j];
        }
        cout<<"\n\n";
    }
 
    cout<<"\n-----------------------------------------------------------\n";
 
    cout<<"\nEnter the number of rows and columns for Matrix B:::\n\n";
    cin>>m>>n;
 
    // m denotes number rows in matrix B
    // n denotes number columns in matrix B
 
 
    cout<<"\n\nEnter elements for Matrix B :::\n\n";
 
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            cin>>b[i][j];
        }
        cout<<"\n";
    }
 
 
    cout<<"\n\nMatrix B :\n\n";
 
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            cout<<"\t"<<b[i][j];
        }
        cout<<"\n\n";
    }
 
    if(y==m)
    {
 
        for(i=0;i<x;i++)
        {
            for(j=0;j<n;j++)
            {
                c[i][j]=0;
                for(int k=0;k<m;k++)
                {
                    c[i][j]=c[i][j]+a[i][k]*b[k][j];
                }
            }
        }
 
        cout<<"\n-----------------------------------------------------------\n";
 
        cout<<"\n\nMultiplication of Matrix A and Matrix B :\n\n";
 
        for(i=0;i<x;i++)
        {
            for(j=0;j<n;j++)
            {
                cout<<"\t"<<c[i][j];
            }
            cout<<"\n\n";
        }
    }
    else
    {
        cout<<"\n\nMultiplication is not possible";
    }
 
    getch();
    return 0;
}
---------------------------------------------

